[
  {
    "VideoId": "8d96026d-1c66-427e-bb71-a61900f97f44",
    "DataApi": "/Entries(guid'8d96026d-1c66-427e-bb71-a61900f97f44')/",
    "VideoPageLink": "/Series/SQL-Workshops/Data-Compression-in-SQL-Server-Pros-and-Cons",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/e805/ad8f5037-5613-47b9-b6c4-757e4b89e805/DataCompression_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:25:04",
    "VideoTitle": "Data Compression in SQL Server - Pros and Cons",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:51:45.0649829Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/e805/ad8f5037-5613-47b9-b6c4-757e4b89e805/DataCompression_mid.mp4",
    "Description": "SQL Server supports row and page compression on tables, indexes and partitions. This can lead to reduced I/O and better performance. However, it can also result in additional CPU usage in some cases, "
  },
  {
    "VideoId": "ae84a16a-6643-4027-9c19-a61900f94934",
    "DataApi": "/Entries(guid'ae84a16a-6643-4027-9c19-a61900f94934')/",
    "VideoPageLink": "/Series/SQL-Workshops/Resource-Governor-in-SQL-Server-Workload-Throttling",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/4b17/85508704-b3da-4376-92cf-b6b64dd94b17/ResourceGovernor_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:26:42",
    "VideoTitle": "Resource Governor in SQL Server - Workload Throttling",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:52:38.0577713Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/4b17/85508704-b3da-4376-92cf-b6b64dd94b17/ResourceGovernor_mid.mp4",
    "Description": "Resource Governor in SQL Server provides CPU, Memory and I/O throttling. In SQL Server 2014 and earlier, CPU throttling works only for similar kind of workloads and not for mixed workloads, where high"
  },
  {
    "VideoId": "fff5be10-ad61-4fe4-8861-a61900f91278",
    "DataApi": "/Entries(guid'fff5be10-ad61-4fe4-8861-a61900f91278')/",
    "VideoPageLink": "/Series/SQL-Workshops/Understanding-ASYNCNETWORKIO-Waits-in-SQL-Server",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/dd74/5391d996-bb5e-487e-a926-b08ebb7add74/ASYNCNETWORKIO_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:14:35",
    "VideoTitle": "Understanding ASYNC_NETWORK_IO Waits in SQL Server",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:52:43.9642492Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/dd74/5391d996-bb5e-487e-a926-b08ebb7add74/ASYNCNETWORKIO_mid.mp4",
    "Description": "In SQL Server, ASYNC_NETWORK_IO wait time can be high due to slow network, like when the database is in the cloud and the application is on premise. Furthermore, it can be slow when CPU utilization is"
  },
  {
    "VideoId": "25ed5d56-8d1a-4553-ae07-a61900f8d965",
    "DataApi": "/Entries(guid'25ed5d56-8d1a-4553-ae07-a61900f8d965')/",
    "VideoPageLink": "/Series/SQL-Workshops/Cardinality-Estimation-Table-Variable-Vs-Temporary-Table-in-SQL-Server",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/101c/c3e9b26b-570f-417b-8283-1cc15bf4101c/Estimation_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:14:33",
    "VideoTitle": "Cardinality Estimation - Table Variable Vs Temporary Table in SQL Server",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:52:50.5286782Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/101c/c3e9b26b-570f-417b-8283-1cc15bf4101c/Estimation_mid.mp4",
    "Description": "SQL Server creates and maintains statistics for temporary tables, which lead to better cardinality estimation and optimal execution plan generation. Table variables have no statistics, which can resul"
  },
  {
    "VideoId": "5b085313-7eab-4d24-8327-a61900f89a4c",
    "DataApi": "/Entries(guid'5b085313-7eab-4d24-8327-a61900f89a4c')/",
    "VideoPageLink": "/Series/SQL-Workshops/Parallel-Insert-Into-Table-Variable-Vs-Temporary-Table-in-SQL-Server",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/e53b/747658ec-123a-487c-93b3-ff4fc6e2e53b/ParallelInsert_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:06:02",
    "VideoTitle": "Parallel Insert Into - Table Variable Vs Temporary Table in SQL Server",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:52:57.9442611Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/e53b/747658ec-123a-487c-93b3-ff4fc6e2e53b/ParallelInsert_mid.mp4",
    "Description": "In SQL Server, for insert into select statements, when the target for insert into is temporary table, the select statement can execute in parallel. When the target is table variable, SQL Server will n"
  },
  {
    "VideoId": "5c27919a-55d2-4329-8697-a61900f861d1",
    "DataApi": "/Entries(guid'5c27919a-55d2-4329-8697-a61900f861d1')/",
    "VideoPageLink": "/Series/SQL-Workshops/Filtered-Statistics-in-SQL-Server",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/7b7a/049babdd-e88d-401c-ae01-243cd19d7b7a/FilteredStatistics_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:12:39",
    "VideoTitle": "Filtered Statistics in SQL Server",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:53:03.0069562Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/7b7a/049babdd-e88d-401c-ae01-243cd19d7b7a/FilteredStatistics_mid.mp4",
    "Description": "In SQL Server, Filtered Statistics can improve cardinality estimation, i.e. when joining lookup table, or while joining fact table and dimension table. For this reason, SQL Server supports the creatio"
  },
  {
    "VideoId": "0dfb033e-fb45-4ecb-8474-a61900f82bae",
    "DataApi": "/Entries(guid'0dfb033e-fb45-4ecb-8474-a61900f82bae')/",
    "VideoPageLink": "/Series/SQL-Workshops/Temp-Table-Caching-in-SQL-Server",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/fd2c/86f465be-d495-4d53-81d6-f86a55adfd2c/TempTableCaching_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:16:05",
    "VideoTitle": "Temp Table Caching in SQL Server",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:53:11.3426588Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/fd2c/86f465be-d495-4d53-81d6-f86a55adfd2c/TempTableCaching_mid.mp4",
    "Description": "SQL Server caches temporary objects (temporary tables and table variables), that are created in a stored procedure. Temporary objects that are created either in dynamic SQL statement or by using sp_ex"
  },
  {
    "VideoId": "02de3ca3-9997-4472-b393-a61900f7e445",
    "DataApi": "/Entries(guid'02de3ca3-9997-4472-b393-a61900f7e445')/",
    "VideoPageLink": "/Series/SQL-Workshops/In-Memory-OLTP-Memory-Optimized-Table-Variables-Vs-Disk-Based-Table-Variable-in-SQL-Server",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/959b/1e8af7c6-1e44-414f-97cc-7343407e959b/MemoryOptimizedTableVariables_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:12:58",
    "VideoTitle": "In-Memory OLTP Memory Optimized Table Variables Vs Disk Based Table Variable in SQL Server",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:53:16.5850768Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/959b/1e8af7c6-1e44-414f-97cc-7343407e959b/MemoryOptimizedTableVariables_mid.mp4",
    "Description": "Starting SQL Server 2014, it is possible to use memory optimized table variables. These are table variables declared using a table type which is memory optimized. Memory optimized table variables have"
  },
  {
    "VideoId": "2da7ca71-bb5c-4932-a52f-a61900f7967f",
    "DataApi": "/Entries(guid'2da7ca71-bb5c-4932-a52f-a61900f7967f')/",
    "VideoPageLink": "/Series/SQL-Workshops/Tempdb-Allocation-Contention-in-SQL-Server",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/8cf3/7f9bafeb-2719-4492-8351-7f490b468cf3/TempdbAllocationContention_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:17:06",
    "VideoTitle": "Tempdb Allocation Contention in SQL Server",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:53:21.9164088Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/8cf3/7f9bafeb-2719-4492-8351-7f490b468cf3/TempdbAllocationContention_mid.mp4",
    "Description": "In SQL Server, the concurrent creation of temporary objects (temporary tables and table variables) from many sessions can lead to tempdb allocation contention. This contention occurs on PFS and SGAM p"
  },
  {
    "VideoId": "c33a80c3-0108-4bb8-a051-a61900f6feab",
    "DataApi": "/Entries(guid'c33a80c3-0108-4bb8-a051-a61900f6feab')/",
    "VideoPageLink": "/Series/SQL-Workshops/PAGELATCH-Waits-with-Update-Statements-in-SQL-Server-PAGELATCHEX-and-PAGELATCHSH",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/5826/f1627cfa-03b3-4c1e-8483-e0ad18e35826/PAGELATCHWaitsUpdate_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:12:42",
    "VideoTitle": "PAGELATCH Waits with Update Statements in SQL Server - PAGELATCH_EX and PAGELATCH_SH",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:53:29.3110183Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/5826/f1627cfa-03b3-4c1e-8483-e0ad18e35826/PAGELATCHWaitsUpdate_mid.mp4",
    "Description": "In SQL Server, concurrent writes or read / write to the same page can lead to PAGELATCH (like PAGELATCH_EX and PAGELATCH_SH) waits or what is knowns as PAGELATCH contention. One common use case is whe"
  },
  {
    "VideoId": "565e9300-a91c-455d-b067-a61900f6ab20",
    "DataApi": "/Entries(guid'565e9300-a91c-455d-b067-a61900f6ab20')/",
    "VideoPageLink": "/Series/SQL-Workshops/Extended-Event-Query-Post-Execution-Showplan-in-SQL-Server",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/e9be/86f502d7-c832-4ec7-a458-b3baa834e9be/QueryPostExecutionShowplan_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:11:11",
    "VideoTitle": "Extended Event Query Post Execution Showplan in SQL Server",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:53:33.7555875Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/e9be/86f502d7-c832-4ec7-a458-b3baa834e9be/QueryPostExecutionShowplan_mid.mp4",
    "Description": "Query Post Execution Showplan event is a very useful event to find problematic queries and execution plans based on CPU usage or duration while analyzing performance issues. It can increase the execut"
  },
  {
    "VideoId": "b495a649-0259-4c1b-8728-a61900f6439b",
    "DataApi": "/Entries(guid'b495a649-0259-4c1b-8728-a61900f6439b')/",
    "VideoPageLink": "/Series/SQL-Workshops/Extended-Event-Locks-Lock-Waits-in-SQL-Server",
    "VideoPageThumb": "https://sec.ch9.ms/ch9/cf3f/695c2a48-2380-48bd-af13-14ad0d79cf3f/LocksLockWaits_960.jpg",
    "ShowName": "SQL Workshops",
    "VideoLength": "00:09:34",
    "VideoTitle": "Extended Event Locks Lock Waits in SQL Server",
    "Author": "Dennis Gassen",
    "UtcDateTimePublished": "2016-06-06T12:53:38.5519539Z",
    "ActualVideoFileLink": "https://sec.ch9.ms/ch9/cf3f/695c2a48-2380-48bd-af13-14ad0d79cf3f/LocksLockWaits_mid.mp4",
    "Description": "When it comes to lock waits, one of the important information we need to know is which statement waited for locks and how long. This is possible with extended events; it is not possible with SQL Serve"
  }
]